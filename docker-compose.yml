version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: godseye
      POSTGRES_USER: godseye
      POSTGRES_PASSWORD: godseye
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U godseye"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:7.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: godseye
      MONGO_INITDB_ROOT_PASSWORD: godseye
      MONGO_INITDB_DATABASE: godseye
    volumes:
      - mongo_data:/data/db
      - ./backend/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Storage Services
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MLflow Tracking Server
  mlflow:
    image: python:3.9-slim
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://godseye:godseye@postgres:5432/godseye
      MLFLOW_DEFAULT_ARTIFACT_ROOT: s3://mlflow-artifacts
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
    ports:
      - "5000:5000"
    volumes:
      - ./ml:/app
    working_dir: /app
    command: >
      bash -c "
        pip install mlflow psycopg2-binary boto3 &&
        mlflow server 
        --backend-store-uri postgresql://godseye:godseye@postgres:5432/godseye
        --default-artifact-root s3://mlflow-artifacts
        --host 0.0.0.0
        --port 5000
      "
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy

  # Backend Django Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://godseye:godseye@postgres:5432/godseye
      - MONGODB_URL=mongodb://godseye:godseye@mongo:27017/godseye
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./shared:/app/shared
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      mlflow:
        condition: service_started
    command: >
      bash -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://godseye:godseye@postgres:5432/godseye
      - MONGODB_URL=mongodb://godseye:godseye@mongo:27017/godseye
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    volumes:
      - ./backend:/app
      - ./shared:/app/shared
      - ./ml:/app/ml
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app worker -l info

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://godseye:godseye@postgres:5432/godseye
      - MONGODB_URL=mongodb://godseye:godseye@mongo:27017/godseye
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - ./shared:/app/shared
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app beat -l info

  # Frontend React Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_MLFLOW_URL=http://localhost:5000
    depends_on:
      - backend

  # ML Training Service
  ml-worker:
    build:
      context: ./ml
      dockerfile: Dockerfile
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    volumes:
      - ./ml:/app
      - ./shared:/app/shared
      - ml_data:/app/data
    depends_on:
      mlflow:
        condition: service_started
      minio:
        condition: service_healthy
    profiles:
      - training

  # Inference Service
  inference:
    build:
      context: ./inference
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    volumes:
      - ./inference:/app
      - ./shared:/app/shared
    depends_on:
      mlflow:
        condition: service_started
      minio:
        condition: service_healthy
    profiles:
      - inference

  # Monitoring Services (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    profiles:
      - monitoring

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  minio_data:
  ml_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: godseye-network
